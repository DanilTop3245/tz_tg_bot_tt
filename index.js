require("dotenv").config();
const { Telegraf } = require("telegraf");
const https = require("https");
const XLSX = require("xlsx");

const bot = new Telegraf(process.env.BOT_TOKEN);

// === –§–ò–õ–¨–¢–†–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ===
let MAX_FOLLOWERS = 3000;
let MIN_VIDEOS_WITH_VIEWS = 2;
let MIN_VIEW_COUNT = 7000;

bot.start((ctx) => {
  ctx.reply(
    `<b>üëã TikTok Analyzer</b>\n\n` +
      `–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –º–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ —Å:\n` +
      `‚Ä¢ –ú–∞–∫—Å. —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤: ${MAX_FOLLOWERS}\n` +
      `‚Ä¢ –í–∏–¥–µ–æ —Å ‚â• ${MIN_VIEW_COUNT} –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: –æ—Ç ${MIN_VIDEOS_WITH_VIEWS}\n\n` +
      `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
      `/analyze username - –∞–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n` +
      `/settings - —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n` +
      `/set followers 3000 - –º–∞–∫—Å–∏–º—É–º —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤\n` +
      `/set views 7000 - –º–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n` +
      `/set videos 2 - –º–∏–Ω–∏–º—É–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ\n\n` +
      `<b>–ü—Ä–∏–º–µ—Ä:</b> /analyze username`,
    { parse_mode: "HTML" }
  );
});

bot.command("settings", (ctx) => {
  ctx.reply(
    `‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n` +
      `‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚â§ <b>${MAX_FOLLOWERS}</b>\n` +
      `‚Ä¢ –ú–∏–Ω–∏–º—É–º –≤–∏–¥–µ–æ —Å ‚â• <b>${MIN_VIEW_COUNT}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <b>${MIN_VIDEOS_WITH_VIEWS}</b>\n\n` +
      `<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n` +
      `/set followers [—á–∏—Å–ª–æ] - –º–∞–∫—Å. —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤\n` +
      `/set views [—á–∏—Å–ª–æ] - –º–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n` +
      `/set videos [—á–∏—Å–ª–æ] - –º–∏–Ω. –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ`,
    { parse_mode: "HTML" }
  );
});

bot.command("set", (ctx) => {
  const args = ctx.message.text.split(" ");
  if (args.length !== 3) {
    return ctx.reply(
      "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
        "/set followers 3000\n" +
        "/set views 7000\n" +
        "/set videos 2"
    );
  }

  const [_, field, value] = args;
  const num = parseInt(value);

  if (isNaN(num) || num < 0) {
    return ctx.reply("‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
  }

  switch (field) {
    case "followers":
      MAX_FOLLOWERS = num;
      ctx.reply(`‚úÖ –ú–∞–∫—Å–∏–º—É–º —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${num}`);
      break;
    case "views":
      MIN_VIEW_COUNT = num;
      ctx.reply(`‚úÖ –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${num}`);
      break;
    case "videos":
      MIN_VIDEOS_WITH_VIEWS = num;
      ctx.reply(`‚úÖ –ú–∏–Ω–∏–º—É–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${num}`);
      break;
    default:
      ctx.reply(
        "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: followers, views, videos"
      );
  }
});

bot.command("analyze", async (ctx) => {
  let username = ctx.message.text.split(" ")[1];
  if (!username) {
    return ctx.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ username –±–µ–∑ @\n–ü—Ä–∏–º–µ—Ä: /analyze username");
  }

  username = username.replace(/[@\s]/g, "").toLowerCase();
  let statusMsgId = null;

  const updateStatus = async (text) => {
    try {
      if (statusMsgId) {
        await bot.telegram.editMessageText(
          ctx.chat.id,
          statusMsgId,
          null,
          text
        );
      } else {
        const msg = await ctx.reply(text);
        statusMsgId = msg.message_id;
      }
    } catch (error) {
      console.log(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ:",
        error.message
      );
      try {
        const msg = await ctx.reply(text);
        statusMsgId = msg.message_id;
      } catch (e) {
        console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e.message);
      }
    }
  };

  try {
    await updateStatus("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...");

    const userInfo = await fetchUserInfo(username);
    if (!userInfo?.secUid) {
      const errorMsg = userInfo?.message?.includes("exceeded")
        ? "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ https://rapidapi.com/Lundehund/api/tiktok-api23"
        : "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π/—É–¥–∞–ª—ë–Ω–Ω—ã–π).";
      return updateStatus(errorMsg);
    }

    await updateStatus("üë• –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤...");
    const followers = await fetchAllFollowers(userInfo.secUid);

    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:", followers.length);
    if (!followers.length) {
      return updateStatus(
        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)."
      );
    }

    await updateStatus(`üìä –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ ${followers.length} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤...`);
    const results = [];
    let lastUpdateTime = Date.now();

    for (let i = 0; i < followers.length; i++) {
      const user = followers[i];
      const followersCount = user.stats?.followerCount || 0;

      if (followersCount > MAX_FOLLOWERS) {
        console.log(
          `‚õî –ü—Ä–æ–ø—É—â–µ–Ω ${user.uniqueId} ‚Äî ${followersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`
        );
        continue;
      }

      const now = Date.now();
      if (i % 10 === 0 && now - lastUpdateTime > 3000) {
        await updateStatus(
          `üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${i + 1}/${followers.length} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤...`
        );
        lastUpdateTime = now;
      }

      const videos = await fetchUserVideos(user.secUid || user.uniqueId);
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uniqueId}: –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ ${videos.length}`
      );

      if (videos.length === 0) {
        console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω ${user.uniqueId} ‚Äî –Ω–µ—Ç –≤–∏–¥–µ–æ`);
        continue;
      }

      const popularVideos = videos.filter((v) => v.playCount >= MIN_VIEW_COUNT);
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uniqueId}: –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ ${popularVideos.length}`
      );

      if (popularVideos.length < MIN_VIDEOS_WITH_VIEWS) {
        console.log(
          `‚õî –ü—Ä–æ–ø—É—â–µ–Ω ${user.uniqueId} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ`
        );
        continue;
      }

      results.push({
        –ù–∏–∫–Ω–µ–π–º: user.nickname || user.uniqueId,
        Username: user.uniqueId,
        Email: extractEmail(user.signature),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤": followersCount,
        –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: user.signature || "‚Äî",
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å": `https://www.tiktok.com/@${user.uniqueId}`,
        "–í—Å–µ–≥–æ –≤–∏–¥–µ–æ": videos.length,
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ": popularVideos.length,
        "–ú–∞–∫—Å. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": Math.max(...videos.map((v) => v.playCount)),
        "–°—Ä. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": Math.round(
          videos.reduce((sum, v) => sum + v.playCount, 0) / videos.length
        ),
      });

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${user.uniqueId} –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);
    }

    if (!results.length) {
      return updateStatus("‚ùó –ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä.");
    }

    await updateStatus("üìÑ –°–æ–∑–¥–∞—é –æ—Ç—á—ë—Ç...");
    const fileName = `analyze_results_${username}_${Date.now()}.xlsx`;
    const buffer = saveToExcel(results);

    await updateStatus(
      `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`
    );
    await ctx.replyWithDocument({
      source: buffer,
      filename: fileName,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", error);
    try {
      await updateStatus("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } catch (e) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", e.message);
    }
  }
});

// === –§–£–ù–ö–¶–ò–ò =====

function fetchUserInfo(username) {
  return new Promise((resolve) => {
    const options = {
      method: "GET",
      hostname: "tiktok-api23.p.rapidapi.com",
      path: `/api/user/info?uniqueId=${encodeURIComponent(username)}`,
      headers: {
        "x-rapidapi-key": process.env.RAPIDAPI_KEY,
        "x-rapidapi-host": "tiktok-api23.p.rapidapi.com",
      },
    };

    const req = https.request(options, (res) => {
      const chunks = [];
      res.on("data", (chunk) => chunks.push(chunk));
      res.on("end", () => {
        try {
          const json = JSON.parse(Buffer.concat(chunks).toString());
          console.log(
            "API Response for user info:",
            JSON.stringify(json, null, 2)
          );
          resolve(json.userInfo?.user || null);
        } catch (e) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e.message);
          resolve({ message: e.message });
        }
      });
    });

    req.on("error", (err) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
      resolve({ message: err.message });
    });

    req.end();
  });
}

async function fetchAllFollowers(secUid) {
  let allFollowers = [];
  let minCursor = 0;
  const count = 50;

  while (true) {
    const followers = await fetchFollowersBySecUid(secUid, minCursor, count);
    allFollowers = allFollowers.concat(followers);

    if (followers.length < count) break;
    minCursor += count;

    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  return allFollowers;
}

function fetchFollowersBySecUid(secUid, minCursor, count) {
  return new Promise((resolve) => {
    const options = {
      method: "GET",
      hostname: "tiktok-api23.p.rapidapi.com",
      path: `/api/user/followers?secUid=${encodeURIComponent(
        secUid
      )}&count=${count}&minCursor=${minCursor}`,
      headers: {
        "x-rapidapi-key": process.env.RAPIDAPI_KEY,
        "x-rapidapi-host": "tiktok-api23.p.rapidapi.com",
      },
    };

    const req = https.request(options, (res) => {
      const chunks = [];
      res.on("data", (chunk) => chunks.push(chunk));
      res.on("end", () => {
        try {
          const json = JSON.parse(Buffer.concat(chunks).toString());
          if (json.message?.includes("exceeded")) {
            console.log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:", json.message);
            resolve([]);
            return;
          }
          const followers = (json.userList || []).map((item) => ({
            ...item.user,
            stats: item.stats || item.statsV2 || {},
          }));
          resolve(followers);
        } catch (e) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:", e.message);
          resolve([]);
        }
      });
    });

    req.on("error", (err) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤:", err.message);
      resolve([]);
    });

    req.end();
  });
}

async function fetchUserVideos(id) {
  const maxRetries = 3;
  let retryCount = 0;
  const endpoint = `/api/user/posts?secUid=${encodeURIComponent(
    id
  )}&count=50&cursor=0`;

  while (retryCount < maxRetries) {
    try {
      const videos = await new Promise((resolve) => {
        const options = {
          method: "GET",
          hostname: "tiktok-api23.p.rapidapi.com",
          path: endpoint,
          headers: {
            "x-rapidapi-key": process.env.RAPIDAPI_KEY,
            "x-rapidapi-host": "tiktok-api23.p.rapidapi.com",
          },
        };

        const req = https.request(options, (res) => {
          const chunks = [];
          res.on("data", (chunk) => chunks.push(chunk));
          res.on("end", () => {
            const responseText = Buffer.concat(chunks).toString();
            console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è ${id}:`, endpoint);
            console.log(
              `üìÑ –û—Ç–≤–µ—Ç:`,
              responseText.substring(0, 200) +
                (responseText.length > 200 ? "..." : "")
            );

            try {
              const json = JSON.parse(responseText);
              if (json.message?.includes("exceeded")) {
                console.log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:", json.message);
                resolve([]);
                return;
              }
              const videos = json.data?.videos || json.itemList || [];
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ –¥–ª—è ${id}`);
              resolve(videos);
            } catch (e) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ:", e.message);
              resolve([]);
            }
          });
        });

        req.on("error", (err) => {
          console.log("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:", err.message);
          resolve([]);
        });

        req.end();
      });

      if (videos.length > 0) return videos;
      retryCount++;
      console.log(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries} –¥–ª—è ${id}`);
      await new Promise((resolve) => setTimeout(resolve, 1000 * retryCount));
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ fetchUserVideos: ${error.message}`);
      retryCount++;
      await new Promise((resolve) => setTimeout(resolve, 1000 * retryCount));
    }
  }

  console.log(
    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è ${id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`
  );
  return [];
}

function extractEmail(bio = "") {
  const emailRegex = /[\w.-]+@[\w.-]+\.[a-zA-Z]{2,}/g;
  const matches = bio.match(emailRegex);
  return matches ? matches.join(", ") : "‚Äî";
}

function saveToExcel(data) {
  try {
    const ws = XLSX.utils.json_to_sheet(data);
    const colWidths = [
      { wch: 20 }, // –ù–∏–∫–Ω–µ–π–º
      { wch: 20 }, // Username
      { wch: 25 }, // Email
      { wch: 15 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤
      { wch: 50 }, // –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
      { wch: 40 }, // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
      { wch: 12 }, // –í—Å–µ–≥–æ –≤–∏–¥–µ–æ
      { wch: 15 }, // –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ
      { wch: 15 }, // –ú–∞–∫—Å. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      { wch: 15 }, // –°—Ä. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    ];
    ws["!cols"] = colWidths;

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞");
    const buffer = XLSX.write(wb, { type: "buffer", bookType: "xlsx" });
    console.log("‚úÖ –§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏");
    return buffer;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ Excel:", error);
    throw error;
  }
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===
bot.catch((err, ctx) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
  try {
    if (ctx && ctx.reply) {
      ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (replyError) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", replyError);
  }
});

// === –ó–ê–ü–£–°–ö ===
console.log("üöÄ –ó–∞–ø—É—Å–∫ TikTok Analyzer Bot...");
bot.launch();

process.once("SIGINT", () => {
  console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
  bot.stop("SIGINT");
});

process.once("SIGTERM", () => {
  console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
  bot.stop("SIGTERM");
});

console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
